PLAN FOR ANIMAL ORPHANAGE MANAGEMENT SYSTEM
This is a relatively simple system that can keep tabs on the animals and workers for a fictional animal orphanage.
Technologies used: Spring Boot, VueJS, MySQL, MongoDB.
Licensed under the GPL (General Public License) for free use, modification and sharing.

GENERAL LAYOUT
The system keeps records of humans (i.e all employees) and animals kept at the orphanage.
For the employees, we have normal staff (who take care of the animals, including
updating their records in the system), an admin (for managing the company's systems) and a manager for the orphanage.
The staff can:
	1. login and logout (they cannot edit their own account details though)
	2. register new animals and de-register them (affecting both databases)
	3. update animal welfare records in the database
	4. a new staff member can create an account, but not delete it.

The admin can:
	1. create, update and delete all accounts in the system (theirs, the staff's and the managers)
	2. reset the system.
	3. maintain the system, adding or removing new features (e.g table fields) as needed.
	4. read system logs, probe for system errors and advice accordingly.
	5. respond to notes left by the manager and mark them as done.
	6. login and logout
The manager can:
	1. view database changes made by both staff members and the admin.
	2. retrieve a summary of company progress records in terms of graphs and charts.
	3. leave notes for the site admin to read and act on (e.g leave a note for the admin to update a certain field
	   in the table).
	4. login and logout

DATABASE(S) PLANS
ANIMALS:
For every animal we will keep records in a MySQL database and a detailed animal-progress record in a MongoDB database
What we will keep in the MySQL database (table 1) -> ANIMAL
	1. animal_id: an autogenerated number to uniquely identify the animal
	2. pet name: a pet name by which staffs refer to it as
	3. common name: e.g cat, dog e.t.c.
	4. animal age (in years)

Table 2 (will have a uni-OneToOne) mapping with 'table 1' -> ANIMAL DETAILS
	5. animal_id of the animal for the one to one mapping
	6. date brought into the orphanage
	7. date adopted (if adopted)
	8. two names of the adoptee
	9. contact number of the adoptee
	10.residential location of the adoptee

What we will keep in the MongoDB database (collection name: animals). Each animal will have its own document in the collection.
Each document will have: -> ANIMALPROGRESSRECORDS (collections name)
	1. animal_id
	2. clinical state- parameters (weight(KGs), number_of_children (if any), medical state (e.g 'medically fit' or otherwise
	   a description of the medical state of the animal)
	3. where found (e.g whether the animal was brought in by a well-wisher or picked from the streets (mention where))
	4. foods- food the animal gets fed at the orphanage
	5. medical progress- this can be null or have an object describing summary of medical checkup notes for
	   that particular animal, and the date the checkup was done, and the next scheduled checkup.

HUMANS:
MySQL TABLES:
table 1 -> a record for every employee working in the orphanage, including the manager and the admin. (employee_details)
	1. employee_id- a unique id for each employee
	2. employee first_name
	3. employee last_name
	4. employee password
	5. employee account state e.g can be active or innactive e.g if they are on a leave

table 2 -> a table that holds the roles of each employee in the database with uni-ManyToMany mapping with table 1 above (roles) 
	6. role_id
	8. role(s)

NOTES
a MongoDB table to hold the notes sent from the manager to the Admin and their state (marked done or not marked done)
	9. note id-  a unique id to identify each note
	10.message- the message included in the note
	11.state- whether the note has been attended to by the admin or not
	12.date posted
